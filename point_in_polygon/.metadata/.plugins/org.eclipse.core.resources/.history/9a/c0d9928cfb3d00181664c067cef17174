package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Scanner;

import main.Point;
import main.Polygon;
import main.Polygon.Builder;


public class Converter {

	public static void main(String[] args) throws FileNotFoundException{
		HashMap<Integer, ArrayList<Polygon>> pairs 
									= new HashMap<Integer, ArrayList<Polygon>>();
		
		//1. file read & construct (id, polygons) pairs
		File polygons_file = new File(args[0]);
	    Scanner sc = new Scanner(polygons_file);
	 
	    while (sc.hasNextLine()){
	    	int id = sc.nextInt();
	    	int poly_cnt = sc.nextInt();
	    	ArrayList<Polygon> polys = new ArrayList<Polygon>();
	    	
	    	for(int i=0; i<poly_cnt; i++){//add all polygons of the ID
	    		Builder builder = Polygon.Builder();
	    		int point_cnt = sc.nextInt();
	    		sc.nextLine();
	    		String[] xy;
	    		
	    		for(int j=0; j<point_cnt; j++){//build a polygon with all points
	    			xy= sc.nextLine().split(" ");
	    			Point p = new Point(Double.valueOf(xy[0]), Double.valueOf(xy[1]));
	    			builder.addVertex(p);
	    		}
	    		Polygon poly = builder.build();
	    		polys.add(poly);
	    	}
	    	pairs.put(id, polys);
	    }
	    sc.close();
	    
	    
	    //2. file read & construct points list
	    File points_file = new File(args[1]);
	    Scanner scp = new Scanner(points_file);
	    ArrayList<Point> points = new ArrayList<Point>();
	    String[] xy;
	    while (scp.hasNextLine()){
	    	xy = scp.nextLine().split(" ");
	    	points.add(new Point(Double.valueOf(xy[0]), Double.valueOf(xy[1])));
	    }
	    scp.close();
	    
	    
	    //3. find id corresponding coordinates & file write
	    BufferedWriter out;
		try {
			out = new BufferedWriter(new FileWriter(args[2]));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    //out.write("Write the string to text file");
	    //out.newLine();
	    boolean found = false;
	    for(int i=0; i<points.size(); i++){
	    	for(Map.Entry<Integer,ArrayList<Polygon>> entry : pairs.entrySet()){
	    		if(found) break;
	    		ArrayList<Polygon> polys = entry.getValue();
	    		for(int j=0; j<polys.size(); j++){
	    			if(polys.get(i).contains(points.get(i))){
	    				try {
							out.write(entry.getKey());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    			}
	    		}
	    	}
	    }
	    try {
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    System.out.println(points.size());
	}
	
	public void test(){
		Polygon polygon = Polygon.Builder()
                .addVertex(new Point(42.499148, 27.485196))
                .addVertex(new Point(42.498600, 27.480000))
                .addVertex(new Point(42.503800, 27.474680))
                .addVertex(new Point(42.510000, 27.468270))
                .addVertex(new Point(42.510788, 27.466904))
                .addVertex(new Point(42.512116, 27.465350))
                .addVertex(new Point(42.512000, 27.467000))
                .addVertex(new Point(42.513579, 27.471027))
                .addVertex(new Point(42.512938, 27.472668))
                .addVertex(new Point(42.511829, 27.474922))
                .addVertex(new Point(42.507945, 27.480124))
                .addVertex(new Point(42.509082, 27.482892))
                .addVertex(new Point(42.536026, 27.490519))
                .addVertex(new Point(42.534470, 27.499703))
                .addVertex(new Point(42.499148, 27.485196))
                .build();

        System.out.println(polygon.contains(new Point(42.508956f, 27.483328f)));
        System.out.println(polygon.contains(new Point(42.505f, 27.48f)));
	}

}
